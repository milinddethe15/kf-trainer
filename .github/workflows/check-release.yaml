name: Check Release

on:
  pull_request:
    branches:
      - release-*
    paths:
      - VERSION

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  SEMVER_PATTERN: '^([0-9]+)\.([0-9]+)\.([0-9]+)(-rc\.([0-9]+))?$'

jobs:
  check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check whether version matches semver pattern
        run: |
          VERSION=$(cat VERSION)
          if [[ ${VERSION} =~ ${{ env.SEMVER_PATTERN }} ]]; then
            echo "Version '${VERSION}' matches semver pattern."
          else
            echo "Version '${VERSION}' does not match semver pattern."
            exit 1
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Check whether SDK version matches
        run: |
          # Extract version from __init__.py
          INIT_VERSION=$(grep '__version__' sdk/kubeflow/trainer/__init__.py | cut -d'"' -f2)

          if [[ ${INIT_VERSION} != ${VERSION} ]]; then
            echo "Error: SDK __init__.py version '${INIT_VERSION}' does not match VERSION '${VERSION}'."
            echo "Run ./hack/python-sdk/gen-sdk.sh to update the SDK version."
            exit 1
          else
            echo "SDK __init__.py version '${INIT_VERSION}' matches version '${VERSION}'."
          fi

      - name: Check whether swagger.json version matches
        run: |
          SWAGGER_VERSION=$(grep -o '"version": "[^"]*"' api/openapi-spec/swagger.json | cut -d'"' -f4)

          if [[ ${SWAGGER_VERSION} != ${VERSION} ]]; then
            echo "Error: swagger.json version '${SWAGGER_VERSION}' does not match VERSION '${VERSION}'."
            exit 1
          else
            echo "swagger.json version '${SWAGGER_VERSION}' matches version '${VERSION}'."
          fi

      - name: Check if tag exists
        run: |
          git fetch --tags
          if git tag -l | grep -q "^${VERSION}$"; then
            echo "Tag '${VERSION}' already exists."
            exit 1
          else
            echo "Tag '${VERSION}' does not exist."
          fi
